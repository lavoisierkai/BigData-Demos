{#
AWS Data Lake Infrastructure Template
===================================
This template creates a comprehensive data lake infrastructure on AWS
including S3 buckets, Glue catalog, EMR cluster, and security configurations.

Variables required:
- environment: Environment configuration
- project: Project configuration
- data_layers: List of data layers (raw, processed, curated)
- security: Security settings
- compute: Compute configuration
#}

# AWS Data Lake Infrastructure for {{ environment.name | upper }}
# Generated from template on {{ current_timestamp() }}
# Project: {{ project.name }} v{{ project.version }}

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.1"
    }
  }
  
  backend "s3" {
    bucket = "{{ terraform.state_bucket }}"
    key    = "data-lake/{{ environment.name }}/terraform.tfstate"
    region = "{{ environment.region }}"
    {%- if terraform.dynamodb_table %}
    dynamodb_table = "{{ terraform.dynamodb_table }}"
    {%- endif %}
    encrypt = true
  }
}

provider "aws" {
  region = "{{ environment.region }}"
  
  default_tags {
    tags = {
      Environment   = "{{ environment.name }}"
      Project      = "{{ project.name }}"
      ManagedBy    = "terraform"
      CostCenter   = "{{ environment.cost_center }}"
      Owner        = "{{ project.owner }}"
      {%- for key, value in common_tags.items() %}
      {{ key }} = "{{ value }}"
      {%- endfor %}
    }
  }
}

# Random suffix for unique resource names
resource "random_string" "suffix" {
  length  = 8
  special = false
  upper   = false
}

locals {
  name_prefix = "{{ project.name }}-{{ environment.name }}"
  random_suffix = random_string.suffix.result
  
  common_tags = {
    Environment = "{{ environment.name }}"
    Project     = "{{ project.name }}"
    ManagedBy   = "terraform"
    CreatedBy   = "jinja-template"
  }
}

#
# VPC and Networking (if not using default)
#
{%- if network.create_vpc %}
resource "aws_vpc" "data_lake" {
  cidr_block           = "{{ network.vpc_cidr }}"
  enable_dns_hostnames = true
  enable_dns_support   = true
  
  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-vpc"
  })
}

resource "aws_internet_gateway" "data_lake" {
  vpc_id = aws_vpc.data_lake.id
  
  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-igw"
  })
}

{%- for i in range(network.availability_zones) %}
resource "aws_subnet" "public_{{ loop.index }}" {
  vpc_id                  = aws_vpc.data_lake.id
  cidr_block              = cidrsubnet(aws_vpc.data_lake.cidr_block, 8, {{ loop.index0 }})
  availability_zone       = data.aws_availability_zones.available.names[{{ loop.index0 }}]
  map_public_ip_on_launch = true
  
  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-public-subnet-{{ loop.index }}"
    Type = "public"
  })
}

resource "aws_subnet" "private_{{ loop.index }}" {
  vpc_id            = aws_vpc.data_lake.id
  cidr_block        = cidrsubnet(aws_vpc.data_lake.cidr_block, 8, {{ loop.index0 + 10 }})
  availability_zone = data.aws_availability_zones.available.names[{{ loop.index0 }}]
  
  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-private-subnet-{{ loop.index }}"
    Type = "private"
  })
}
{%- endfor %}

data "aws_availability_zones" "available" {
  state = "available"
}

# Route tables
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.data_lake.id
  
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.data_lake.id
  }
  
  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-public-rt"
  })
}

{%- for i in range(network.availability_zones) %}
resource "aws_route_table_association" "public_{{ loop.index }}" {
  subnet_id      = aws_subnet.public_{{ loop.index }}.id
  route_table_id = aws_route_table.public.id
}
{%- endfor %}

{%- if network.enable_nat_gateway %}
# NAT Gateway for private subnets
resource "aws_eip" "nat" {
  domain = "vpc"
  
  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-nat-eip"
  })
}

resource "aws_nat_gateway" "data_lake" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public_1.id
  
  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-nat-gw"
  })
  
  depends_on = [aws_internet_gateway.data_lake]
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.data_lake.id
  
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.data_lake.id
  }
  
  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-private-rt"
  })
}

{%- for i in range(network.availability_zones) %}
resource "aws_route_table_association" "private_{{ loop.index }}" {
  subnet_id      = aws_subnet.private_{{ loop.index }}.id
  route_table_id = aws_route_table.private.id
}
{%- endfor %}
{%- endif %}
{%- endif %}

#
# S3 Buckets for Data Lake Layers
#
{%- for layer in data_layers %}
resource "aws_s3_bucket" "data_lake_{{ layer.name }}" {
  bucket = "${local.name_prefix}-data-lake-{{ layer.name }}-${local.random_suffix}"
  
  tags = merge(local.common_tags, {
    Name        = "${local.name_prefix}-data-lake-{{ layer.name }}"
    Layer       = "{{ layer.name }}"
    Purpose     = "{{ layer.description }}"
    DataFormat  = "{{ layer.format | default('parquet') }}"
  })
}

{%- if security.encryption.enabled %}
resource "aws_s3_bucket_server_side_encryption_configuration" "data_lake_{{ layer.name }}" {
  bucket = aws_s3_bucket.data_lake_{{ layer.name }}.id

  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm     = "{{ security.encryption.algorithm }}"
      {%- if security.encryption.kms_key_id %}
      kms_master_key_id = "{{ security.encryption.kms_key_id }}"
      {%- endif %}
    }
    bucket_key_enabled = {{ security.encryption.bucket_key_enabled | default(true) | lower }}
  }
}
{%- endif %}

resource "aws_s3_bucket_versioning" "data_lake_{{ layer.name }}" {
  bucket = aws_s3_bucket.data_lake_{{ layer.name }}.id
  versioning_configuration {
    status = "{{ layer.versioning | default('Enabled') }}"
  }
}

resource "aws_s3_bucket_public_access_block" "data_lake_{{ layer.name }}" {
  bucket = aws_s3_bucket.data_lake_{{ layer.name }}.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

{%- if layer.lifecycle_enabled %}
resource "aws_s3_bucket_lifecycle_configuration" "data_lake_{{ layer.name }}" {
  bucket = aws_s3_bucket.data_lake_{{ layer.name }}.id

  rule {
    id     = "{{ layer.name }}_lifecycle"
    status = "Enabled"

    {%- if layer.expiration_days %}
    expiration {
      days = {{ layer.expiration_days }}
    }
    {%- endif %}

    {%- for transition in layer.transitions %}
    transition {
      days          = {{ transition.days }}
      storage_class = "{{ transition.storage_class }}"
    }
    {%- endfor %}

    {%- if layer.abort_incomplete_multipart_upload_days %}
    abort_incomplete_multipart_upload {
      days_after_initiation = {{ layer.abort_incomplete_multipart_upload_days }}
    }
    {%- endif %}
  }
}
{%- endif %}

{%- if layer.notification_enabled %}
resource "aws_s3_bucket_notification" "data_lake_{{ layer.name }}" {
  bucket = aws_s3_bucket.data_lake_{{ layer.name }}.id

  {%- if layer.lambda_notifications %}
  {%- for notification in layer.lambda_notifications %}
  lambda_function {
    lambda_function_arn = {{ notification.lambda_arn }}
    events              = {{ notification.events | to_json_pretty }}
    {%- if notification.filter_prefix %}
    filter_prefix       = "{{ notification.filter_prefix }}"
    {%- endif %}
    {%- if notification.filter_suffix %}
    filter_suffix       = "{{ notification.filter_suffix }}"
    {%- endif %}
  }
  {%- endfor %}
  {%- endif %}

  {%- if layer.sqs_notifications %}
  {%- for notification in layer.sqs_notifications %}
  queue {
    queue_arn     = {{ notification.queue_arn }}
    events        = {{ notification.events | to_json_pretty }}
    {%- if notification.filter_prefix %}
    filter_prefix = "{{ notification.filter_prefix }}"
    {%- endif %}
    {%- if notification.filter_suffix %}
    filter_suffix = "{{ notification.filter_suffix }}"
    {%- endif %}
  }
  {%- endfor %}
  {%- endif %}
}
{%- endif %}
{%- endfor %}

#
# AWS Glue Data Catalog
#
resource "aws_glue_catalog_database" "data_catalog" {
  name         = "{{ project.name }}_{{ environment.name }}_data_catalog"
  description  = "Data catalog for {{ project.name }} {{ environment.name }} environment"
  
  {%- if glue.catalog_encryption.enabled %}
  catalog_encryption_configuration {
    encryption_at_rest {
      catalog_encryption_mode = "{{ glue.catalog_encryption.mode }}"
      {%- if glue.catalog_encryption.sse_aws_kms_key_id %}
      sse_aws_kms_key_id = "{{ glue.catalog_encryption.sse_aws_kms_key_id }}"
      {%- endif %}
    }
    
    connection_password_encryption {
      aws_kms_key_id                       = "{{ glue.catalog_encryption.connection_kms_key_id }}"
      return_connection_password_encrypted = {{ glue.catalog_encryption.return_encrypted_password | default(true) | lower }}
    }
  }
  {%- endif %}
}

#
# IAM Roles and Policies
#
resource "aws_iam_role" "glue_service_role" {
  name = "${local.name_prefix}-glue-service-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "glue.amazonaws.com"
        }
      }
    ]
  })

  tags = local.common_tags
}

resource "aws_iam_role_policy_attachment" "glue_service_role_policy" {
  role       = aws_iam_role.glue_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
}

resource "aws_iam_policy" "glue_s3_access" {
  name        = "${local.name_prefix}-glue-s3-access"
  description = "IAM policy for Glue to access S3 data lake buckets"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:ListBucket"
        ]
        Resource = [
          {%- for layer in data_layers %}
          aws_s3_bucket.data_lake_{{ layer.name }}.arn,
          "${aws_s3_bucket.data_lake_{{ layer.name }}.arn}/*"{{ "," if not loop.last }}
          {%- endfor %}
        ]
      }
    ]
  })

  tags = local.common_tags
}

resource "aws_iam_role_policy_attachment" "glue_s3_access" {
  role       = aws_iam_role.glue_service_role.name
  policy_arn = aws_iam_policy.glue_s3_access.arn
}

{%- if emr.enabled %}
#
# EMR Cluster Configuration
#
resource "aws_iam_role" "emr_service_role" {
  name = "${local.name_prefix}-emr-service-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "elasticmapreduce.amazonaws.com"
        }
      }
    ]
  })

  tags = local.common_tags
}

resource "aws_iam_role_policy_attachment" "emr_service_role_policy" {
  role       = aws_iam_role.emr_service_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"
}

resource "aws_iam_role" "emr_instance_profile_role" {
  name = "${local.name_prefix}-emr-instance-profile-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })

  tags = local.common_tags
}

resource "aws_iam_role_policy_attachment" "emr_instance_profile_policy" {
  role       = aws_iam_role.emr_instance_profile_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role"
}

resource "aws_iam_instance_profile" "emr_instance_profile" {
  name = "${local.name_prefix}-emr-instance-profile"
  role = aws_iam_role.emr_instance_profile_role.name
}

{%- if emr.auto_scaling.enabled %}
resource "aws_iam_role" "emr_autoscaling_role" {
  name = "${local.name_prefix}-emr-autoscaling-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = [
            "elasticmapreduce.amazonaws.com",
            "application-autoscaling.amazonaws.com"
          ]
        }
      }
    ]
  })

  tags = local.common_tags
}

resource "aws_iam_role_policy_attachment" "emr_autoscaling_policy" {
  role       = aws_iam_role.emr_autoscaling_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforAutoScalingRole"
}
{%- endif %}

{%- if not emr.use_existing_cluster %}
resource "aws_emr_cluster" "data_processing" {
  name          = "${local.name_prefix}-emr-cluster"
  release_label = "{{ emr.release_label }}"
  applications  = {{ emr.applications | to_json_pretty }}

  ec2_attributes {
    key_name                          = "{{ emr.key_name }}"
    subnet_id                         = {{ 'aws_subnet.private_1.id' if network.create_vpc else '"' + emr.subnet_id + '"' }}
    emr_managed_master_security_group = aws_security_group.emr_master.id
    emr_managed_slave_security_group  = aws_security_group.emr_worker.id
    instance_profile                  = aws_iam_instance_profile.emr_instance_profile.arn
    {%- if emr.additional_security_groups %}
    additional_master_security_groups = "{{ emr.additional_security_groups | join(',') }}"
    additional_slave_security_groups  = "{{ emr.additional_security_groups | join(',') }}"
    {%- endif %}
  }

  master_instance_group {
    instance_type = "{{ emr.master_instance_type }}"
    {%- if emr.master_ebs_config %}
    ebs_config {
      size                 = {{ emr.master_ebs_config.size }}
      type                 = "{{ emr.master_ebs_config.type }}"
      volumes_per_instance = {{ emr.master_ebs_config.volumes_per_instance }}
    }
    {%- endif %}
  }

  core_instance_group {
    instance_type  = "{{ emr.core_instance_type }}"
    instance_count = {{ emr.core_instance_count }}
    
    {%- if emr.core_ebs_config %}
    ebs_config {
      size                 = {{ emr.core_ebs_config.size }}
      type                 = "{{ emr.core_ebs_config.type }}"
      volumes_per_instance = {{ emr.core_ebs_config.volumes_per_instance }}
    }
    {%- endif %}
    
    {%- if emr.auto_scaling.enabled %}
    autoscaling_policy = jsonencode({
      Constraints = {
        MinCapacity = {{ emr.auto_scaling.min_capacity }}
        MaxCapacity = {{ emr.auto_scaling.max_capacity }}
      }
      Rules = [
        {
          Name = "ScaleOutMemoryPercentage"
          Description = "Scale out if YarnMemoryAvailablePercentage is less than 15"
          Action = {
            Market = "ON_DEMAND"
            SimpleScalingPolicyConfiguration = {
              AdjustmentType = "CHANGE_IN_CAPACITY"
              ScalingAdjustment = {{ emr.auto_scaling.scale_out_adjustment }}
              CoolDown = {{ emr.auto_scaling.scale_out_cooldown }}
            }
          }
          Trigger = {
            CloudWatchAlarmDefinition = {
              ComparisonOperator = "LESS_THAN"
              EvaluationPeriods = {{ emr.auto_scaling.evaluation_periods }}
              MetricName = "YarnMemoryAvailablePercentage"
              Namespace = "AWS/ElasticMapReduce"
              Period = {{ emr.auto_scaling.period }}
              Statistic = "AVERAGE"
              Threshold = {{ emr.auto_scaling.memory_threshold }}
              Unit = "PERCENT"
            }
          }
        }
      ]
    })
    {%- endif %}
  }

  {%- if emr.task_instance_groups %}
  {%- for task_group in emr.task_instance_groups %}
  task_instance_group {
    instance_type  = "{{ task_group.instance_type }}"
    instance_count = {{ task_group.instance_count }}
    name           = "{{ task_group.name }}"
    
    {%- if task_group.bid_price %}
    bid_price = "{{ task_group.bid_price }}"
    {%- endif %}
    
    {%- if task_group.ebs_config %}
    ebs_config {
      size                 = {{ task_group.ebs_config.size }}
      type                 = "{{ task_group.ebs_config.type }}"
      volumes_per_instance = {{ task_group.ebs_config.volumes_per_instance }}
    }
    {%- endif %}
  }
  {%- endfor %}
  {%- endif %}

  service_role     = aws_iam_role.emr_service_role.arn
  {%- if emr.auto_scaling.enabled %}
  autoscaling_role = aws_iam_role.emr_autoscaling_role.arn
  {%- endif %}

  {%- if emr.configurations %}
  configurations_json = jsonencode({{ emr.configurations | to_json_pretty }})
  {%- endif %}

  {%- if emr.bootstrap_actions %}
  {%- for action in emr.bootstrap_actions %}
  bootstrap_action {
    path = "{{ action.path }}"
    name = "{{ action.name }}"
    {%- if action.args %}
    args = {{ action.args | to_json_pretty }}
    {%- endif %}
  }
  {%- endfor %}
  {%- endif %}

  {%- if emr.steps %}
  {%- for step in emr.steps %}
  step {
    action_on_failure = "{{ step.action_on_failure | default('TERMINATE_CLUSTER') }}"
    name              = "{{ step.name }}"

    hadoop_jar_step {
      jar  = "{{ step.jar }}"
      {%- if step.main_class %}
      main_class = "{{ step.main_class }}"
      {%- endif %}
      {%- if step.args %}
      args = {{ step.args | to_json_pretty }}
      {%- endif %}
      {%- if step.properties %}
      properties = {{ step.properties | to_json_pretty }}
      {%- endif %}
    }
  }
  {%- endfor %}
  {%- endif %}

  {%- if environment.auto_shutdown %}
  auto_termination_policy {
    idle_timeout = {{ emr.idle_timeout | default(3600) }}
  }
  {%- endif %}

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-emr-cluster"
  })
}

# Security Groups for EMR
resource "aws_security_group" "emr_master" {
  name_prefix = "${local.name_prefix}-emr-master-"
  vpc_id      = {{ 'aws_vpc.data_lake.id' if network.create_vpc else '"' + emr.vpc_id + '"' }}

  ingress {
    from_port = 22
    to_port   = 22
    protocol  = "tcp"
    cidr_blocks = {{ emr.ssh_cidr_blocks | to_json_pretty }}
  }

  {%- if emr.web_ui_access %}
  # Spark History Server
  ingress {
    from_port = 18080
    to_port   = 18080
    protocol  = "tcp"
    cidr_blocks = {{ emr.web_ui_cidr_blocks | to_json_pretty }}
  }

  # Resource Manager
  ingress {
    from_port = 8088
    to_port   = 8088
    protocol  = "tcp"
    cidr_blocks = {{ emr.web_ui_cidr_blocks | to_json_pretty }}
  }
  {%- endif %}

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-emr-master-sg"
  })
}

resource "aws_security_group" "emr_worker" {
  name_prefix = "${local.name_prefix}-emr-worker-"
  vpc_id      = {{ 'aws_vpc.data_lake.id' if network.create_vpc else '"' + emr.vpc_id + '"' }}

  ingress {
    from_port = 22
    to_port   = 22
    protocol  = "tcp"
    cidr_blocks = {{ emr.ssh_cidr_blocks | to_json_pretty }}
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(local.common_tags, {
    Name = "${local.name_prefix}-emr-worker-sg"
  })
}
{%- endif %}
{%- endif %}

#
# Outputs
#
output "s3_bucket_names" {
  description = "Names of created S3 buckets"
  value = {
    {%- for layer in data_layers %}
    {{ layer.name }} = aws_s3_bucket.data_lake_{{ layer.name }}.bucket
    {%- endfor %}
  }
}

output "s3_bucket_arns" {
  description = "ARNs of created S3 buckets"
  value = {
    {%- for layer in data_layers %}
    {{ layer.name }} = aws_s3_bucket.data_lake_{{ layer.name }}.arn
    {%- endfor %}
  }
}

output "glue_catalog_database_name" {
  description = "Glue catalog database name"
  value       = aws_glue_catalog_database.data_catalog.name
}

output "glue_service_role_arn" {
  description = "Glue service role ARN"
  value       = aws_iam_role.glue_service_role.arn
}

{%- if emr.enabled and not emr.use_existing_cluster %}
output "emr_cluster_id" {
  description = "EMR cluster ID"
  value       = aws_emr_cluster.data_processing.id
}

output "emr_cluster_arn" {
  description = "EMR cluster ARN"
  value       = aws_emr_cluster.data_processing.arn
}

output "emr_master_dns" {
  description = "EMR master node DNS name"
  value       = aws_emr_cluster.data_processing.master_public_dns
}
{%- endif %}

{%- if network.create_vpc %}
output "vpc_id" {
  description = "VPC ID"
  value       = aws_vpc.data_lake.id
}

output "public_subnet_ids" {
  description = "Public subnet IDs"
  value = [
    {%- for i in range(network.availability_zones) %}
    aws_subnet.public_{{ loop.index }}.id{{ "," if not loop.last }}
    {%- endfor %}
  ]
}

output "private_subnet_ids" {
  description = "Private subnet IDs"
  value = [
    {%- for i in range(network.availability_zones) %}
    aws_subnet.private_{{ loop.index }}.id{{ "," if not loop.last }}
    {%- endfor %}
  ]
}
{%- endif %}