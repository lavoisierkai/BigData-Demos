apiVersion: v1
kind: Namespace
metadata:
  name: spark-operator
  labels:
    name: spark-operator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spark-operator
  namespace: spark-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spark-operator
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - services
  - configmaps
  - secrets
  verbs:
  - create
  - get
  - delete
  - update
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - create
  - get
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - resourcequotas
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - update
  - delete
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - create
  - get
  - update
  - delete
- apiGroups:
  - sparkoperator.k8s.io
  resources:
  - sparkapplications
  - sparkapplications/status
  - scheduledsparkapplications
  - scheduledsparkapplications/status
  verbs:
  - "*"
- apiGroups:
  - scheduling.k8s.io
  resources:
  - priorityclasses
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spark-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spark-operator
subjects:
- kind: ServiceAccount
  name: spark-operator
  namespace: spark-operator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spark-operator
  namespace: spark-operator
  labels:
    app.kubernetes.io/name: spark-operator
    app.kubernetes.io/version: v1beta2-1.3.8-3.1.1
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: spark-operator
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: spark-operator
        app.kubernetes.io/version: v1beta2-1.3.8-3.1.1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: spark-operator
      securityContext:
        runAsNonRoot: true
        runAsUser: 185
        runAsGroup: 185
        fsGroup: 185
      containers:
      - name: spark-operator
        image: gcr.io/spark-operator/spark-operator:v1beta2-1.3.8-3.1.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 8000
          name: webhook
        args:
        - -v=2
        - -logtostderr
        - -namespace=
        - -enable-ui-service=true
        - -enable-resource-quota-enforcement=true
        - -enable-webhook=true
        - -webhook-svc-namespace=spark-operator
        - -webhook-port=8000
        - -webhook-svc-name=spark-webhook
        - -webhook-config-name=spark-webhook-config
        - -webhook-namespace-selector=spark-operator-webhook=enabled
        - -enable-batch-scheduler=true
        - -leader-election=true
        - -leader-election-lock-namespace=spark-operator
        - -leader-election-lock-name=spark-operator-lock
        resources:
          limits:
            cpu: 200m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: SPARK_OPERATOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        livenessProbe:
          httpGet:
            path: /metrics
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /metrics
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: spark-webhook
  namespace: spark-operator
  labels:
    app.kubernetes.io/name: spark-operator
spec:
  ports:
  - port: 443
    targetPort: 8000
    name: webhook
  selector:
    app.kubernetes.io/name: spark-operator
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingAdmissionWebhook
metadata:
  name: spark-webhook-config
webhooks:
- name: mutate-sparkapplication.sparkoperator.k8s.io
  clientConfig:
    service:
      name: spark-webhook
      namespace: spark-operator
      path: "/webhook"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["sparkoperator.k8s.io"]
    apiVersions: ["v1beta2"]
    resources: ["sparkapplications"]
  namespaceSelector:
    matchLabels:
      spark-operator-webhook: enabled
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: spark-webhook-config
webhooks:
- name: validate-sparkapplication.sparkoperator.k8s.io
  clientConfig:
    service:
      name: spark-webhook
      namespace: spark-operator
      path: "/webhook"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["sparkoperator.k8s.io"]
    apiVersions: ["v1beta2"]
    resources: ["sparkapplications"]
  namespaceSelector:
    matchLabels:
      spark-operator-webhook: enabled
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spark-operator-config
  namespace: spark-operator
data:
  config.yaml: |
    # Spark Operator Configuration
    batchScheduler:
      enable: true
      schedulerName: volcano
    webhook:
      enable: true
      port: 8000
    metrics:
      enable: true
      port: 8080
      endpoint: /metrics
    leaderElection:
      lockNamespace: spark-operator
      lockName: spark-operator-lock
    enableUIService: true
    enableResourceQuotaEnforcement: true
    resyncInterval: 30s
    namespace: ""
---
apiVersion: v1
kind: Service
metadata:
  name: spark-operator-metrics
  namespace: spark-operator
  labels:
    app.kubernetes.io/name: spark-operator
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: spark-operator