-- =====================================================
-- Azure Stream Analytics Query: IoT Anomaly Detection
-- =====================================================
-- 
-- This query demonstrates advanced IoT telemetry processing with:
-- • Multi-sensor anomaly detection using statistical methods
-- • Machine learning integration for predictive maintenance
-- • Geospatial analysis for location-based alerts
-- • Complex event processing for pattern detection
-- • Real-time alerting with severity classification
--
-- Input Sources:
-- • IoTDeviceEvents: Real-time device telemetry
-- • DeviceReference: Device metadata and thresholds
-- • WeatherData: Environmental reference data
-- • MaintenanceHistory: Historical maintenance records
--
-- Output Destinations:
-- • RealTimeAlerts: Immediate alert notifications
-- • DeviceMetrics: Aggregated device performance metrics
-- • AnomalyLog: Detailed anomaly information for analysis
-- • PredictiveMaintenance: Maintenance predictions
-- =====================================================

-- Step 1: Data Preprocessing and Enrichment
-- =====================================================
WITH DeviceEnrichment AS (
    SELECT 
        iot.DeviceId,
        iot.EventTime,
        iot.Temperature,
        iot.Humidity,
        iot.Pressure,
        iot.Vibration,
        iot.PowerConsumption,
        iot.BatteryLevel,
        iot.Latitude,
        iot.Longitude,
        iot.Altitude,
        iot.ErrorCode,
        iot.OperatingMode,
        iot.FirmwareVersion,
        
        -- Enrich with device metadata
        ref.DeviceType,
        ref.Manufacturer,
        ref.Model,
        ref.InstallationDate,
        ref.CriticalityLevel,
        ref.MaintenanceSchedule,
        ref.TemperatureMin,
        ref.TemperatureMax,
        ref.HumidityMin,
        ref.HumidityMax,
        ref.PressureMin,
        ref.PressureMax,
        ref.VibrationThreshold,
        ref.PowerConsumptionNormal,
        ref.LocationRegion,
        ref.AssetValue,
        
        -- Enrich with weather data for environmental correlation
        weather.AmbientTemperature,
        weather.ExternalHumidity,
        weather.BarometricPressure,
        weather.WindSpeed,
        weather.WeatherCondition,
        
        -- Calculate derived metrics
        CASE 
            WHEN iot.Temperature BETWEEN ref.TemperatureMin AND ref.TemperatureMax THEN 0
            WHEN iot.Temperature < ref.TemperatureMin THEN (ref.TemperatureMin - iot.Temperature) / ref.TemperatureMin
            ELSE (iot.Temperature - ref.TemperatureMax) / ref.TemperatureMax
        END AS TemperatureDeviation,
        
        CASE 
            WHEN iot.Humidity BETWEEN ref.HumidityMin AND ref.HumidityMax THEN 0
            WHEN iot.Humidity < ref.HumidityMin THEN (ref.HumidityMin - iot.Humidity) / ref.HumidityMin
            ELSE (iot.Humidity - ref.HumidityMax) / ref.HumidityMax
        END AS HumidityDeviation,
        
        ABS(iot.PowerConsumption - ref.PowerConsumptionNormal) / ref.PowerConsumptionNormal AS PowerDeviation,
        
        -- Environmental impact factors
        ABS(iot.Temperature - weather.AmbientTemperature) AS TemperatureDelta,
        ABS(iot.Humidity - weather.ExternalHumidity) AS HumidityDelta
        
    FROM IoTDeviceEvents iot TIMESTAMP BY EventTime
    LEFT JOIN DeviceReference ref ON iot.DeviceId = ref.DeviceId
    LEFT JOIN WeatherData weather ON 
        ST_DISTANCE(iot.Latitude, iot.Longitude, weather.Latitude, weather.Longitude) < 10000 -- 10km radius
        AND DATEDIFF(minute, weather.Timestamp, iot.EventTime) BETWEEN -15 AND 15
),

-- Step 2: Statistical Anomaly Detection
-- =====================================================
StatisticalBaseline AS (
    SELECT 
        DeviceId,
        DeviceType,
        AVG(Temperature) AS AvgTemperature,
        STDEV(Temperature) AS StdDevTemperature,
        AVG(Humidity) AS AvgHumidity,
        STDEV(Humidity) AS StdDevHumidity,
        AVG(Pressure) AS AvgPressure,
        STDEV(Pressure) AS StdDevPressure,
        AVG(Vibration) AS AvgVibration,
        STDEV(Vibration) AS StdDevVibration,
        AVG(PowerConsumption) AS AvgPowerConsumption,
        STDEV(PowerConsumption) AS StdDevPowerConsumption,
        COUNT(*) AS SampleCount,
        MIN(EventTime) AS BaselineStart,
        MAX(EventTime) AS BaselineEnd,
        System.Timestamp() AS WindowEnd
    FROM DeviceEnrichment
    GROUP BY DeviceId, DeviceType, SlidingWindow(hour, 24, minute, 15) -- 24-hour sliding window, updated every 15 minutes
    HAVING COUNT(*) >= 100 -- Minimum samples for statistical significance
),

-- Step 3: Real-time Anomaly Detection
-- =====================================================
AnomalyDetection AS (
    SELECT 
        de.DeviceId,
        de.EventTime,
        de.DeviceType,
        de.Temperature,
        de.Humidity,
        de.Pressure,
        de.Vibration,
        de.PowerConsumption,
        de.BatteryLevel,
        de.Latitude,
        de.Longitude,
        de.CriticalityLevel,
        de.AssetValue,
        de.TemperatureDeviation,
        de.HumidityDeviation,
        de.PowerDeviation,
        
        -- Statistical z-scores for anomaly detection
        CASE 
            WHEN sb.StdDevTemperature > 0 
            THEN ABS(de.Temperature - sb.AvgTemperature) / sb.StdDevTemperature
            ELSE 0
        END AS TemperatureZScore,
        
        CASE 
            WHEN sb.StdDevHumidity > 0 
            THEN ABS(de.Humidity - sb.AvgHumidity) / sb.StdDevHumidity
            ELSE 0
        END AS HumidityZScore,
        
        CASE 
            WHEN sb.StdDevPressure > 0 
            THEN ABS(de.Pressure - sb.AvgPressure) / sb.StdDevPressure
            ELSE 0
        END AS PressureZScore,
        
        CASE 
            WHEN sb.StdDevVibration > 0 
            THEN ABS(de.Vibration - sb.AvgVibration) / sb.StdDevVibration
            ELSE 0
        END AS VibrationZScore,
        
        CASE 
            WHEN sb.StdDevPowerConsumption > 0 
            THEN ABS(de.PowerConsumption - sb.AvgPowerConsumption) / sb.StdDevPowerConsumption
            ELSE 0
        END AS PowerZScore,
        
        -- Threshold-based anomalies
        CASE 
            WHEN de.Temperature > de.TemperatureMax OR de.Temperature < de.TemperatureMin THEN 1
            ELSE 0
        END AS TemperatureThresholdAnomaly,
        
        CASE 
            WHEN de.Humidity > de.HumidityMax OR de.Humidity < de.HumidityMin THEN 1
            ELSE 0
        END AS HumidityThresholdAnomaly,
        
        CASE 
            WHEN de.Pressure > de.PressureMax OR de.Pressure < de.PressureMin THEN 1
            ELSE 0
        END AS PressureThresholdAnomaly,
        
        CASE 
            WHEN de.Vibration > de.VibrationThreshold THEN 1
            ELSE 0
        END AS VibrationThresholdAnomaly,
        
        -- Battery and operational anomalies
        CASE 
            WHEN de.BatteryLevel < 20 THEN 1
            ELSE 0
        END AS LowBatteryAnomaly,
        
        CASE 
            WHEN de.ErrorCode IS NOT NULL AND de.ErrorCode != 0 THEN 1
            ELSE 0
        END AS ErrorAnomaly,
        
        -- Geospatial anomalies (device moved unexpectedly)
        CASE 
            WHEN LAG(de.Latitude, 1) OVER (PARTITION BY de.DeviceId ORDER BY de.EventTime) IS NOT NULL
                AND ST_DISTANCE(
                    de.Latitude, de.Longitude,
                    LAG(de.Latitude, 1) OVER (PARTITION BY de.DeviceId ORDER BY de.EventTime),
                    LAG(de.Longitude, 1) OVER (PARTITION BY de.DeviceId ORDER BY de.EventTime)
                ) > 1000 -- More than 1km movement
                AND DATEDIFF(minute, LAG(de.EventTime, 1) OVER (PARTITION BY de.DeviceId ORDER BY de.EventTime), de.EventTime) < 60
            THEN 1
            ELSE 0
        END AS LocationAnomaly,
        
        sb.AvgTemperature,
        sb.StdDevTemperature,
        sb.SampleCount
        
    FROM DeviceEnrichment de
    LEFT JOIN StatisticalBaseline sb ON de.DeviceId = sb.DeviceId
        AND DATEDIFF(minute, sb.WindowEnd, de.EventTime) BETWEEN -1 AND 1
),

-- Step 4: Anomaly Scoring and Classification
-- =====================================================
AnomalyScoring AS (
    SELECT 
        *,
        -- Composite anomaly score
        (CASE WHEN TemperatureZScore > 2 THEN 0.2 ELSE 0 END +
         CASE WHEN HumidityZScore > 2 THEN 0.15 ELSE 0 END +
         CASE WHEN PressureZScore > 2 THEN 0.15 ELSE 0 END +
         CASE WHEN VibrationZScore > 2 THEN 0.25 ELSE 0 END +
         CASE WHEN PowerZScore > 2 THEN 0.2 ELSE 0 END +
         TemperatureThresholdAnomaly * 0.3 +
         HumidityThresholdAnomaly * 0.2 +
         PressureThresholdAnomaly * 0.2 +
         VibrationThresholdAnomaly * 0.4 +
         LowBatteryAnomaly * 0.25 +
         ErrorAnomaly * 0.5 +
         LocationAnomaly * 0.35) * 
        -- Criticality multiplier
        CASE 
            WHEN CriticalityLevel = 'Critical' THEN 1.5
            WHEN CriticalityLevel = 'High' THEN 1.2
            WHEN CriticalityLevel = 'Medium' THEN 1.0
            ELSE 0.8
        END AS CompositeAnomalyScore,
        
        -- Primary anomaly type classification
        CASE 
            WHEN VibrationZScore > 3 OR VibrationThresholdAnomaly = 1 THEN 'Mechanical Issue'
            WHEN TemperatureZScore > 3 OR TemperatureThresholdAnomaly = 1 THEN 'Thermal Issue'
            WHEN PowerZScore > 3 THEN 'Power Issue'
            WHEN HumidityZScore > 3 OR HumidityThresholdAnomaly = 1 THEN 'Environmental Issue'
            WHEN ErrorAnomaly = 1 THEN 'System Error'
            WHEN LowBatteryAnomaly = 1 THEN 'Battery Issue'
            WHEN LocationAnomaly = 1 THEN 'Location Issue'
            WHEN PressureZScore > 3 OR PressureThresholdAnomaly = 1 THEN 'Pressure Issue'
            ELSE 'General Anomaly'
        END AS AnomalyType
        
    FROM AnomalyDetection
),

-- Step 5: Complex Event Processing - Pattern Detection
-- =====================================================
EventPatterns AS (
    SELECT 
        DeviceId,
        EventTime,
        CompositeAnomalyScore,
        AnomalyType,
        
        -- Detect cascading failures (multiple anomalies in short time)
        COUNT(*) OVER (
            PARTITION BY DeviceId 
            ORDER BY EventTime 
            RANGE BETWEEN INTERVAL '15' MINUTE PRECEDING AND CURRENT ROW
        ) AS AnomaliesInLast15Min,
        
        -- Detect recurring patterns
        CASE 
            WHEN LAG(AnomalyType, 1) OVER (PARTITION BY DeviceId ORDER BY EventTime) = AnomalyType
                AND DATEDIFF(minute, LAG(EventTime, 1) OVER (PARTITION BY DeviceId ORDER BY EventTime), EventTime) < 60
            THEN 1
            ELSE 0
        END AS RecurringPattern,
        
        -- Detect escalating severity
        CASE 
            WHEN CompositeAnomalyScore > LAG(CompositeAnomalyScore, 1) OVER (PARTITION BY DeviceId ORDER BY EventTime)
                AND LAG(CompositeAnomalyScore, 1) OVER (PARTITION BY DeviceId ORDER BY EventTime) > 0.3
            THEN 1
            ELSE 0
        END AS EscalatingAnomaly
        
    FROM AnomalyScoring
    WHERE CompositeAnomalyScore > 0.2 -- Only process significant anomalies
),

-- Step 6: Predictive Maintenance Scoring
-- =====================================================
PredictiveMaintenanceScoring AS (
    SELECT 
        DeviceId,
        DeviceType,
        AVG(CompositeAnomalyScore) AS AvgAnomalyScore,
        COUNT(*) AS AnomalyCount,
        MAX(CompositeAnomalyScore) AS MaxAnomalyScore,
        SUM(CASE WHEN AnomalyType = 'Mechanical Issue' THEN 1 ELSE 0 END) AS MechanicalIssues,
        SUM(CASE WHEN AnomalyType = 'Thermal Issue' THEN 1 ELSE 0 END) AS ThermalIssues,
        SUM(CASE WHEN AnomalyType = 'Power Issue' THEN 1 ELSE 0 END) AS PowerIssues,
        MAX(AnomaliesInLast15Min) AS MaxCascadingCount,
        SUM(RecurringPattern) AS RecurringPatternCount,
        SUM(EscalatingAnomaly) AS EscalatingAnomalyCount,
        System.Timestamp() AS WindowEnd,
        
        -- Maintenance risk score calculation
        (AVG(CompositeAnomalyScore) * 0.3 +
         (COUNT(*) / 100.0) * 0.2 + -- Normalize anomaly frequency
         (MAX(CompositeAnomalyScore)) * 0.2 +
         (SUM(CASE WHEN AnomalyType = 'Mechanical Issue' THEN 1 ELSE 0 END) / 10.0) * 0.15 +
         (MAX(AnomaliesInLast15Min) / 5.0) * 0.1 +
         (SUM(RecurringPattern) / 5.0) * 0.05) AS MaintenanceRiskScore
        
    FROM EventPatterns
    GROUP BY DeviceId, DeviceType, TumblingWindow(hour, 4) -- 4-hour maintenance assessment window
),

-- Step 7: Final Alert Generation
-- =====================================================
AlertGeneration AS (
    SELECT 
        as_inner.DeviceId,
        as_inner.EventTime,
        as_inner.DeviceType,
        as_inner.Temperature,
        as_inner.Humidity,
        as_inner.Pressure,
        as_inner.Vibration,
        as_inner.PowerConsumption,
        as_inner.BatteryLevel,
        as_inner.Latitude,
        as_inner.Longitude,
        as_inner.CriticalityLevel,
        as_inner.AssetValue,
        as_inner.CompositeAnomalyScore,
        as_inner.AnomalyType,
        ep.AnomaliesInLast15Min,
        ep.RecurringPattern,
        ep.EscalatingAnomaly,
        
        -- Alert severity determination
        CASE 
            WHEN as_inner.CompositeAnomalyScore > 0.8 THEN 'Critical'
            WHEN as_inner.CompositeAnomalyScore > 0.6 THEN 'High'
            WHEN as_inner.CompositeAnomalyScore > 0.4 THEN 'Medium'
            WHEN as_inner.CompositeAnomalyScore > 0.2 THEN 'Low'
            ELSE 'Informational'
        END AS AlertSeverity,
        
        -- Alert priority (considering business impact)
        CASE 
            WHEN as_inner.CriticalityLevel = 'Critical' AND as_inner.CompositeAnomalyScore > 0.6 THEN 1
            WHEN as_inner.CriticalityLevel = 'High' AND as_inner.CompositeAnomalyScore > 0.7 THEN 2
            WHEN as_inner.CompositeAnomalyScore > 0.8 THEN 3
            WHEN ep.AnomaliesInLast15Min > 5 THEN 4
            WHEN ep.EscalatingAnomaly = 1 THEN 5
            ELSE 10
        END AS AlertPriority,
        
        -- Recommended actions
        CASE 
            WHEN as_inner.AnomalyType = 'Mechanical Issue' AND as_inner.CompositeAnomalyScore > 0.7 
                THEN 'Schedule immediate mechanical inspection'
            WHEN as_inner.AnomalyType = 'Thermal Issue' AND as_inner.CompositeAnomalyScore > 0.7 
                THEN 'Check cooling systems and thermal management'
            WHEN as_inner.AnomalyType = 'Power Issue' 
                THEN 'Inspect power supply and electrical connections'
            WHEN as_inner.AnomalyType = 'Battery Issue' 
                THEN 'Schedule battery replacement or charging'
            WHEN as_inner.AnomalyType = 'Location Issue' 
                THEN 'Investigate potential device theft or unauthorized movement'
            WHEN as_inner.AnomalyType = 'System Error' 
                THEN 'Review error logs and consider firmware update'
            WHEN ep.AnomaliesInLast15Min > 5 
                THEN 'Device experiencing multiple issues - escalate to technical team'
            ELSE 'Monitor device closely and investigate root cause'
        END AS RecommendedAction,
        
        -- Estimated impact
        CASE 
            WHEN as_inner.AssetValue > 100000 AND as_inner.CompositeAnomalyScore > 0.6 
                THEN 'High - Critical asset at risk'
            WHEN as_inner.AssetValue > 50000 AND as_inner.CompositeAnomalyScore > 0.5 
                THEN 'Medium - Valuable asset requires attention'
            WHEN as_inner.CompositeAnomalyScore > 0.8 
                THEN 'High - Severe anomaly detected'
            ELSE 'Low - Minor issue detected'
        END AS EstimatedImpact,
        
        as_inner.TemperatureZScore,
        as_inner.VibrationZScore,
        as_inner.PowerZScore
        
    FROM AnomalyScoring as_inner
    LEFT JOIN EventPatterns ep ON as_inner.DeviceId = ep.DeviceId 
        AND as_inner.EventTime = ep.EventTime
    WHERE as_inner.CompositeAnomalyScore > 0.3 -- Only generate alerts for significant anomalies
)

-- Output 1: Real-time Alerts for immediate response
-- =====================================================
SELECT 
    DeviceId,
    EventTime,
    DeviceType,
    AnomalyType,
    AlertSeverity,
    AlertPriority,
    CompositeAnomalyScore,
    RecommendedAction,
    EstimatedImpact,
    Temperature,
    Vibration,
    PowerConsumption,
    CriticalityLevel,
    AssetValue,
    AnomaliesInLast15Min,
    'IoTAnomalyDetection' AS AlertSource,
    NEWID() AS AlertId
INTO RealTimeAlerts
FROM AlertGeneration
WHERE AlertSeverity IN ('Critical', 'High') 
   OR AlertPriority <= 5;

-- Output 2: Device Performance Metrics for monitoring dashboards
-- =====================================================
SELECT 
    DeviceId,
    DeviceType,
    CriticalityLevel,
    COUNT(*) AS TotalEvents,
    AVG(Temperature) AS AvgTemperature,
    AVG(Humidity) AS AvgHumidity,
    AVG(Pressure) AS AvgPressure,
    AVG(Vibration) AS AvgVibration,
    AVG(PowerConsumption) AS AvgPowerConsumption,
    AVG(BatteryLevel) AS AvgBatteryLevel,
    MAX(TemperatureZScore) AS MaxTemperatureZScore,
    MAX(VibrationZScore) AS MaxVibrationZScore,
    MAX(PowerZScore) AS MaxPowerZScore,
    SUM(CASE WHEN CompositeAnomalyScore > 0.3 THEN 1 ELSE 0 END) AS AnomalyCount,
    AVG(CompositeAnomalyScore) AS AvgAnomalyScore,
    MAX(CompositeAnomalyScore) AS MaxAnomalyScore,
    System.Timestamp() AS WindowEnd
INTO DeviceMetrics
FROM AnomalyScoring
GROUP BY DeviceId, DeviceType, CriticalityLevel, TumblingWindow(minute, 15);

-- Output 3: Detailed Anomaly Log for analysis and ML training
-- =====================================================
SELECT 
    DeviceId,
    EventTime,
    DeviceType,
    AnomalyType,
    CompositeAnomalyScore,
    TemperatureZScore,
    HumidityZScore,
    PressureZScore,
    VibrationZScore,
    PowerZScore,
    TemperatureThresholdAnomaly,
    HumidityThresholdAnomaly,
    PressureThresholdAnomaly,
    VibrationThresholdAnomaly,
    LowBatteryAnomaly,
    ErrorAnomaly,
    LocationAnomaly,
    Temperature,
    Humidity,
    Pressure,
    Vibration,
    PowerConsumption,
    BatteryLevel,
    Latitude,
    Longitude,
    CriticalityLevel,
    AssetValue
INTO AnomalyLog
FROM AnomalyScoring
WHERE CompositeAnomalyScore > 0.1; -- Log all minor anomalies for analysis

-- Output 4: Predictive Maintenance Recommendations
-- =====================================================
SELECT 
    DeviceId,
    DeviceType,
    WindowEnd,
    MaintenanceRiskScore,
    AnomalyCount,
    AvgAnomalyScore,
    MaxAnomalyScore,
    MechanicalIssues,
    ThermalIssues,
    PowerIssues,
    MaxCascadingCount,
    RecurringPatternCount,
    EscalatingAnomalyCount,
    CASE 
        WHEN MaintenanceRiskScore > 0.8 THEN 'Immediate maintenance required'
        WHEN MaintenanceRiskScore > 0.6 THEN 'Schedule maintenance within 24 hours'
        WHEN MaintenanceRiskScore > 0.4 THEN 'Schedule maintenance within 1 week'
        WHEN MaintenanceRiskScore > 0.2 THEN 'Monitor closely, consider maintenance'
        ELSE 'Normal operation'
    END AS MaintenanceRecommendation,
    CASE 
        WHEN MaintenanceRiskScore > 0.8 THEN 1  -- Critical
        WHEN MaintenanceRiskScore > 0.6 THEN 2  -- High
        WHEN MaintenanceRiskScore > 0.4 THEN 3  -- Medium
        WHEN MaintenanceRiskScore > 0.2 THEN 4  -- Low
        ELSE 5  -- Normal
    END AS MaintenancePriority
INTO PredictiveMaintenance
FROM PredictiveMaintenanceScoring
WHERE MaintenanceRiskScore > 0.2;